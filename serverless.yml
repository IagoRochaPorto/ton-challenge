service: sls-my-first-service
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_CUSTOM_REGION, 'us-east-1'}
  memorySize: 128
  timeout: 3
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { 'Fn::GetAtt': ['usersTable', 'Arn'] }
        - { 'Fn::GetAtt': ['accessTable', 'Arn'] }

functions:
  usersApi:
    name: ${sls:stage}-users-lambda
    handler: functions/userLambda/usersApi.handler
    description: users api
    events:
      - http:
          path: /user
          method: POST
          cors: true
          bodyType: 'AddUserRequest'
          responseData:
            '201':
              description: OK
              bodyType: 'AddUserResponse'
      - http:
          path: /auth
          method: POST
          cors: true
          bodyType: 'AuthUserRequest'
          responseData:
            '200':
              description: OK
              bodyType: 'AuthUserResponse'
      - http:
          path: /user
          method: GET
          cors: true
          responseData:
            '200':
              description: OK
              bodyType: 'GetUsersResponse'

  accessApi:
    name: ${sls:stage}-access-lambda
    handler: functions/accessLambda/accessApi.handler
    description: access api
    events:
      - http:
          path: /access
          method: POST
          cors: true
          bodyType: 'IncrementAccessesRequest'
          responseData:
            '201':
              description: OK
      - http:
          path: /access
          method: GET
          cors: true
          responseData:
            '200':
              description: OK
              bodyType: 'GetAccessesResponse'

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    accessTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-roles
        AttributeDefinitions:
          - AttributeName: role
            AttributeType: S
        KeySchema:
          - AttributeName: role
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  dynamodb:
    stages:
      - dev
  autoswagger:
    typefiles:
      - ./api-types.d.ts

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-auto-swagger
